import { randomBytes } from 'crypto';
import {
  toBuffer,
  hashPersonalMessage,
  fromRpcSig,
  ecrecover,
  publicToAddress,
  bufferToHex,
} from 'ethereumjs-util';
import Auth, { AuthenticateDTO, AuthOptions } from '.';
import Action from '../Action';
import MetamaskAuthError from '../errors/MetamaskAuthError';
import Token from './Token';

export default class MetamaskAuth extends Auth {
  name = 'AUTH_METAMASK';

  constructor(options: AuthOptions = {}) {
    super(options);
  }

  private async generateMetamaskNonce() {
    return new Promise<string>((resolve, reject) => {
      randomBytes(128, (error, buf) => {
        if (error) {
          reject(
            new MetamaskAuthError({
              code: 'METAMASK/ER_NONCE_GEN',
              error,
            })
          );
        }
        resolve(buf.toString('hex'));
      });
    });
  }

  /**
   * Create a message containing the nonce for the user to sign
   * @param nonce Generated random nonce
   * @returns Message containing the nonce for the user to sign
   */
  private getMetamaskSignMessage(nonce: string | number) {
    if (typeof nonce === 'number') nonce = nonce.toString();
    return 'I am signing my one-time nonce: ' + nonce;
  }

  /**
   * Elliptic curve signature verification of user signature
   * @param publicAddress Metamask wallet address
   * @param nonce Random nonce generated by Sigmate backend, from DB
   * @param signature Signed message from user
   * @returns True if signature is verified, false otherwise
   */
  private verifyMetamaskSignature(
    publicAddress: string,
    nonce: string | number,
    signature: string
  ) {
    try {
      // Derive address from signature
      const msg = this.getMetamaskSignMessage(nonce);
      const msgHash = hashPersonalMessage(toBuffer(Buffer.from(msg, 'utf-8')));
      const { v, r, s } = fromRpcSig(signature);
      const publicKey = ecrecover(msgHash, v, r, s);
      const derivedPublicAddress = bufferToHex(publicToAddress(publicKey));

      // Compare it with given publicAddress
      return publicAddress.toLowerCase() === derivedPublicAddress.toLowerCase();
    } catch (error) {
      throw new MetamaskAuthError({ code: 'METAMASK/ER_VERIFY' });
    }
  }

  public async getNonce(
    dto: AuthenticateDTO,
    parentAction: Action | undefined = undefined
  ) {
    // Step 1/2. Find or create user with wallet address, and generate nonce
    const action = new Action({
      type: Action.TYPE.SERVICE,
      name: 'METAMASK_GET_NONCE',
      transaction: true,
      parent: parentAction,
    });
    return await action.run(async () => {
      if (!dto.metamask?.walletAddress) {
        throw new MetamaskAuthError({ code: 'METAMASK/IV_DTO' });
      }
      const { connect, walletAddress } = dto.metamask;
      const user = this.user;

      if (connect) {
        // Connect Metamask wallet (for already logged in users)
        if (!user.found) {
          // Users should already be logged in for this action to succeed
          throw new MetamaskAuthError({
            code: 'USER/NF',
            message: 'User not found while connecting Metamask',
          });
        }

        // Load necessary attributes
        await user.reload({ options: 'AUTH_METAMASK' }, action);

        // TODO check privileges
      } else {
        // Look for user with the wallet address
        await user.find(
          { metamaskWallet: walletAddress, options: 'AUTH_METAMASK' },
          action
        );
        if (!user.found) {
          // New user! Create user first
          await user.create(
            {
              metamask: {
                metamaskWallet: walletAddress,
                isMetamaskVerified: false,
              },
            },
            action
          );
        }
      }
      // Generate random nonce
      const nonce = await this.generateMetamaskNonce();
      // Save this to the DB, and
      await user.updateAuth({ metamask: { nonce } }, action);
      this.model = user.model?.auth;
      // return the nonce
      return nonce;
    });
  }

  public async authenticate(
    dto: AuthenticateDTO,
    parentAction: Action | undefined = undefined
  ) {
    const action = new Action({
      type: Action.TYPE.SERVICE,
      name: 'METAMASK_AUTHENTICATE',
      transaction: true,
      parent: parentAction,
    });
    return await action.run(async () => {
      if (!dto.metamask) {
        throw new MetamaskAuthError({ code: 'METAMASK/IV_DTO' });
      }
      const { connect, walletAddress, signature } = dto.metamask;
      if (!walletAddress || !signature) {
        throw new MetamaskAuthError({ code: 'METAMASK/IV_DTO' });
      }

      const user = this.user;
      if (!connect) {
        await user.find(
          { metamaskWallet: walletAddress, options: 'AUTH_METAMASK' },
          action
        );
      }

      if (!user.found) {
        throw new MetamaskAuthError({
          code: 'USER/NF',
          message: 'User not found during Metamask Auth',
        });
      }

      const auth = user.model?.auth;
      if (!auth) {
        throw new MetamaskAuthError({
          code: 'USER/NF_AUTH',
          message: 'Metamask authentication failed',
        });
      }

      const nonce = auth.metamaskNonce || '';
      const verified = this.verifyMetamaskSignature(
        walletAddress,
        nonce,
        signature
      );
      if (!verified) {
        throw new MetamaskAuthError({ code: 'METAMASK/IV_SIGNATURE' });
      }

      const aToken = new Token({ type: 'ACCESS', user });
      const rToken = new Token({ type: 'REFRESH', user });

      return {
        user,
        accessToken: await aToken.getToken({ renew: true }, action),
        refreshToken: await rToken.getToken({ renew: true }, action),
      };
    });
  }
}
